Python调用C库比较简单，不经过任何封装打包成so，再使用python的ctypes调用即可。
（1）C语言文件：pycall.c




/***gcc -o libpycall.so -shared -fPIC pycall.c*/
#include <stdio.h>
#include <stdlib.h>
int foo(int a, int b)
{
  printf("you input %d and %d\n", a, b);
  return a+b;
}

（2）gcc编译生成动态库libpycall.so：gcc -o libpycall.so -shared -fPIC pycall.c。使用g++编译生成C动态库的代码中的函数或者方法时，需要使用extern "C"来进行编译。


（3）Python调用动态库的文件：pycall.py

import ctypes
ll = ctypes.cdll.LoadLibrary 
#lib = ll("./libpycall.so")  
lib = ll("D:/test/c/py call c/libpycall.so")#全路径
lib.foo(1, 3)
print('***finish***')




lib = ll("D:\test\c\py call c\libpycall.so")  

（4）运行结果：
